#include <bits/stdc++.h>
using namespace std;
#define ll long long
template<class t>
class RBT {
    struct node {
        node *left, *right,*parent;
        t data;
        bool color;//true is red

        node(t d) {
            data = d;
            left = right=parent = nullptr;
            color= true;

        }
    };
private:
    node *root,*nil;
    void leftRotate(node* x){
        node* y = x->right;
        x->right = y->left;
        if (y->left != nil) {
            y->left->parent = x;
        }
        if (y->left!=nil)
            y->left->parent=x;
        y->parent = x->parent;
        if (x->parent == nullptr) {
            root = y;
        }
        else if (x == x->parent->left) {//if x is a left child
            x->parent->left = y;
        }
        else { //if x is a right child
            x->parent->right = y;
        }
        y->left = x;
        x->parent = y;
    }
    void rightRotate(node* x){
        node* y = x->left;
        x->left = y->right;
        if (y->right !=nil) {
            y->right->parent = x;
        }
        if (y->right!=nil)
            y->right->parent=x;

        y->parent = x->parent;
        if (x->parent == nullptr) {
            root = y;
        }
        else if (x == x->parent->right) {
            x->parent->right = y;
        }
        else {
            x->parent->left = y;
        }
        y->right = x;
        x->parent = y;
    }
    void fixInsert(node *&x) {
        node *parent = nullptr;
        node *grandparent = nullptr;

        while (x != root && x->color == true && x->parent->color == true) {
            parent = x->parent;
            grandparent = parent->parent;

            if (parent == grandparent->left) {
                node *uncle = grandparent->right;
                if (uncle->color == true) {
                    grandparent->color = true;
                    parent->color = false;
                    uncle->color = false;
                    x = grandparent;
                } else {
                    if (x == parent->right) {
                        leftRotate(parent);
                        x = parent;
                        parent = x->parent;
                    }
                    rightRotate(grandparent);
                    swap(parent->color, grandparent->color);
                    x = parent;
                }
            }
            else {
                node *uncle = grandparent->left;
                if (uncle->color == true) {
                    grandparent->color = true;
                    parent->color = false;
                    uncle->color = false;
                    x = grandparent;
                } else {
                    if (x == parent->left) {
                        rightRotate(parent);
                        x = parent;
                        parent = x->parent;
                    }
                    leftRotate(grandparent);
                    swap(parent->color, grandparent->color);
                    x = parent;
                }
            }
        }
        root->color = false;
    }
    void pre(node *te) {
        if (te == nullptr) {
            return;
        }
        cout << te->data << " ";
        pre(te->left);
        pre(te->right);
    }

    void in(node *te) {
        if (te == nullptr) {
            return;
        }
        in(te->left);
        cout << te->data << " ";
        in(te->right);
    }
    void post(node *te) {
        if (te == nullptr) {
            return;
        }
        post(te->left);
        post(te->right);
        cout << te->data << " ";
    }
    node *search(node *r, t item) {
        if (r == nullptr)
            return nullptr;
        else if (r->data == item) {
            return r;
        } else if (item < r->data) {
            return search(r->left, item);
        } else {
            return search(r->right, item);
        }
    }
    node *mn(node *r) {
        while (r->left != nil) {
            r = r->left;
        }
        return r;
    }

    node *mx(node *r) {
        if (r == nullptr) {
            return nullptr;
        }
        if (r->right == nullptr) {
            return r;
        } else
            return mx(r->right);
    }
    void Delete(node* n,t value){
        node *z = n;
        while (z != nil) {
            if (z->data == value) {
                break;
            } else if (value < z->data) {
                z = z->left;
            } else {
                z = z->right;
            }
        }
        if (z == nil) {
            return;
        }
        node *y = z;
        bool yOriginalColor = y->color;
        node *x;

        if (z->left == nil) {
            x = z->right;
            rep_parent(z, z->right);
        } else if (z->right == nil) {
            x = z->left;
            rep_parent(z, z->left);
        } else {
            y = mn(z->right);
            yOriginalColor = y->color;
            x = y->right;
            if (y->parent == z) {
                x->parent = y;
            } else {
                rep_parent(y, y->right);
                y->right = z->right;
                y->right->parent = y;
            }
            rep_parent(z, y);
            y->left = z->left;
            y->left->parent = y;
            y->color = z->color;
        }
        delete z;
        if (yOriginalColor == false) {
            deleteFix(x);
        }
    }
    void deleteFix(node *DB) {
        while (DB != root && DB->color == false) {
            if (DB == DB->parent->left) {
                node *brother = DB->parent->right;
                if (brother->color == true) {
                    brother->color = false;
                    DB->parent->color = true;
                    leftRotate(DB->parent);
                    brother = DB->parent->right;
                }
                if (brother->left->color == false && brother->right->color == false) {
                    brother->color = true;
                    DB = DB->parent;
                } else{
                    if (brother->right->color == false) {
                        brother->left->color = false;
                        brother->color = true;
                        rightRotate(brother);
                        brother = DB->parent->right;
                    }
                    brother->color = DB->parent->color;
                    DB->parent->color = false;
                    brother->right->color = false;
                    leftRotate(DB->parent);
                    DB = root;
                }
            } else {
                node *w = DB->parent->left;
                if (w->color == true) {
                    w->color = false;
                    DB->parent->color = true;
                    rightRotate(DB->parent);
                    w = DB->parent->left;
                }
                if (w->right->color == false && w->left->color == false) {
                    w->color = true;
                    DB = DB->parent;
                } else {
                    if (w->left->color == false) {
                        w->right->color = false;
                        w->color = true;
                        leftRotate(w);
                        w = DB->parent->left;
                    }
                    w->color = DB->parent->color;
                    DB->parent->color = false;
                    w->left->color = false;
                    rightRotate(DB->parent);
                    DB = root;
                }
            }
        }
        DB->color = false;
    }
    void rep_parent(node* u, node* v) {
        if (u->parent == nullptr) {
            root = v;
        } else if (u == u->parent->left) {
            u->parent->left = v;
        } else {
            u->parent->right = v;
        }
        v->parent = u->parent;
    }

public:
    RBT() {
        nil=new node(0);
        nil->color=false;
        root=nil;
    }
    bool search(t item) {
        node *fr = search(root, item);
        return !(fr == nullptr);
    }
    void insert(ll data){
        node* nw=new node(data),*par=nullptr,*curr=root;
        nw->left=nil;
        nw->right=nil;
        while(curr!=nil){
            par=curr;
            if(nw->data<curr->data){
                curr=curr->left;
            }else curr=curr->right;
        }
        nw->parent=par;
        if(par== nullptr){
            root=nw;
        }else if(nw->data<par->data){
            par->left=nw;
        }else par->right=nw;

        fixInsert(nw);
    }
    t min_element(){
        return mn(root)->data;
    }
    t max_element(){
        return mx(root)->data;
    }
    bool Isempty(){
        return root== nullptr;
    }
    void Pre_order(){
        pre(root);
    }
    void Post_order(){
        post(root);
    }
    void IN_order(){
        in(root);
    }
    void Delete_node(t value){
        Delete(root,value);
    }
    void BFS(){
        queue<node*>q;
        q.push(root);
        while (!q.empty()){
            int sz=q.size();
            while (sz--){
                node *temp=q.front();
                q.pop();
                cout<<temp->data<<" "<<(temp->color?"R":"B")<<"      ";
                if (temp->left!= nullptr)
                    q.push(temp->left);
                if (temp->right!= nullptr)
                    q.push(temp->right);
            }
            cout<<"\n";
        }
    }
};
int main() {
    RBT<int> tre;
    int n=3,x;
    while (n--){
        cin>>x;
        tre.insert(x);
        tre.BFS();
    }
    tre.Delete_node(2);

    tre.BFS();
    return 0;
}
